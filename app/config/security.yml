# To get started with security, check out the documentation:
# http://symfony.com/doc/current/book/security.html
security:
    encoders:
        FOS\UserBundle\Model\UserInterface: sha512

    role_hierarchy:
        ROLE_USER :      ROLE_USER
        ROLE_ADMIN:       [ROLE_USER,  ROLE_SONATA_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    providers:
        fos_userbundle:
            id: fos_user.user_provider.username

    # http://symfony.com/doc/current/book/security.html#where-do-users-come-from-user-providers
    providers:
        in_memory:
            memory: ~

    firewalls:
        main:
            remember_me:
                secret:   '%secret%'
                lifetime: 604800 # 1 week in seconds
                path:     /home

            pattern: ^/
            form_login:
                 provider: fos_userbundle
                 csrf_token_generator: security.csrf.token_manager
                 login_path: /home
                 always_use_default_target_path : true
                 use_referer : true
                 default_target_path: /home
                 use_forward:    false
                 check_path:     /login_check
 # login success redirecting options (read further below)
                 always_use_default_target_path: false
                 default_target_path:            /
                 target_path_parameter:          _target_path
                 use_referer:                    false


  # field names for the username and password fields
                 username_parameter: _username
                 password_parameter: _password
# by default, the login form *must* be a POST, not a GET
                 post_only:      true


  # by default, a session must exist before submitting an authentication request
                 # if false, then Request::hasPreviousSession is not called during authentication
                 require_previous_session: true





            logout:
                path:    /logout
                target:  /home
                invalidate_session: true
                delete_cookies:
                   a: { path: null, domain: null }
                   b: { path: null, domain: null }
               # handlers: [some.service.id, another.service.id]
               # success_handler: some.service.id
            anonymous:    true

    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY}
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/profile, role: ROLE_USER  }
        - { path: ^/admin/, role: ROLE_ADMIN}